<?phpclass Efiles_idpo// version: 1.0// date: 2013-02-18{	var $output;	var $mode;    var $node_id;	var $db_prefix;    var $status;    var $module_id;    var $manage_access;    var $display_variant;	var $form_data;    var $upload_max_filesize;	function Efiles_idpo($global_params, $params, $module_id, $node_id, $module_uri) {        global $Engine;                          $this->db_prefix = "idpo_";        $this->node_id = $node_id;		$this->module_id = $module_id;		$this->output = array();		$this->output["messages"] = array("good" => array(), "bad" => array());        $this->output["upload_max_filesize"]  = $this->upload_max_filesize = 30*1024*1024;              $parts = explode(";", $params);	$this->output["scripts_mode"] = $this->output["mode"] = $this->mode = $parts[0];        $this->output["manage_access"] = $this->manage_access = $node_id && $Engine->ModuleOperationAllowed("upload_files");                $this->output["current_module_id"]=$module_id;        $this->output["messages"]["good"] = $this->output["messages"]["bad"] = array();		$this->output["module_id"] = $this->module_id;                switch ($this->mode)		{                                       case "add_folder":                                                           break;                   case "list_folder":                                           $this->output["POST_DATA1"]=$_POST;                                                             //list_files просмотр папки                        if (( $_GET["node"] == $node_id                             and is_numeric($_GET["folder_id"])                             and $_GET["action"] = "list_files")                             or( is_numeric($_POST[$this->node_id]["folder_id"])                                 and $_POST[$this->node_id]["action"] == "list_files"                                and isset($_POST[$this->node_id]["pass"]))                            )                                                                                           {                                           if (is_numeric($_POST[$this->node_id]["folder_id"])) $folder_id= $_POST[$this->node_id]["folder_id"];                                       if (is_numeric($_GET["folder_id"])) $folder_id= $_GET["folder_id"];                                                                                 if( isset($_POST[$this->node_id]["pass"]))                                           $_SESSION["module_".$this->module_id]["folder_".$folder_id]['pass'] = $_POST[$this->node_id]["pass"];                                                                                    $this->output['arr_List_Files']=$this->arr_List_files($folder_id);                                       $this->output["arr_List_Files_folder_id"]=$folder_id;                                                                              if (is_numeric($_GET["file_id"])) $this->arr_List_files($folder_id,$_GET["file_id"]);                                                                                                                 }                                                                                    IF ($this->manage_access)                       {                         $this->output['plugins'][] = 'jquery.ui.datepicker.min';                                                                                                  if (isset($_POST[$this->node_id]) && is_array($_POST[$this->node_id]))                         {                                                          $this->output["POST_DATA"]=$_POST;                             $this->output["POST_FILES"]=$_FILES;                                                          if ($_POST[$this->node_id]['op']=="add_folder") $this->void_Add_Folder();                           }                                                        //upload_files                           if ( is_numeric($_POST[$this->node_id]["folder_id"])                                 and $_POST[$this->node_id]["op"] = "files_upload")                               $this->void_upload_files($_POST[$this->node_id]["folder_id"],$node_id);                                                                          //edit_folder                                  if ($_GET["node"] == $node_id                                 and $_GET["action"] == "edit_folder"                                 and is_numeric($_GET["id"]))                                $this->void_edit_Folder($_GET["id"]);                                               //delete_folder                           if ($_GET["node"] == $node_id                                 and $_GET["action"] == "delete_folder"                                 and is_numeric($_GET["id"]))                                 $this->void_delete_Folder($_GET["id"]);                                               //add_file_to_folder-form                           if ($_GET["node"] == $node_id                                and $_GET["action"] == "add_files"                                and is_numeric($_GET["id"]))                                 $this->output['folder_to_add_id'] = $_GET["id"];                     //delete_file                           if ($_GET["node"] == $node_id                                and $_GET["action"] == "delete_file"                                and is_numeric($_GET["id"]))                                $this->void_delete_file($_GET["id"]);                                           }                                                                    $this->output['arr_List_Folder'] = $this->arr_List_Folder();                                                                                       break;                }                                	}function void_upload_files($folder_id,$node_id){    global $DB,$Engine;                if (isset($_FILES[$node_id])) {                $i=0;                         foreach ($_FILES[$node_id]["error"] as $key => $error) {                                                                                   if ($error == UPLOAD_ERR_OK) {                                                $tmp_name = $_FILES[$this->node_id]["tmp_name"][$key];                                                $name = $_FILES[$this->node_id]["name"][$key];                                                $size = $_FILES[$this->node_id]["size"][$key];                                                                                                                                              if($size > $this->upload_max_filesize) {							                        $this->output["messages"]["bad"][] =                                                     "Размер вашего файла превышает максимально допустимый ("                                                    .trim(ini_get('upload_max_filesize'))."Б)";                            						                        }                                                 else {							                            $file_name = $this->cp1251_to_utf8($name);							                            $orig_name = explode(".", $file_name);							                            $name_parts = count($orig_name);                                                        //получаем расширение							                            $ext = $orig_name[$name_parts-1];							                            unset($orig_name[$name_parts-1]);                                                        //получаем имя файла 							                            $original_name = implode($orig_name, ".");                                                                                                                                                                                                                                                            if (file_exists($tmp_name)                                                    and filesize($tmp_name) == $size )  {}                                                else     { $this->output["messages"]["bad"][] = "Не удалось закачать файл $name";}                                                                                                                                                                                                if(array_search($ext, array('doc','docx')) !== false && !$Engine->OperationAllowed($this->module_id, 'files.upload.msoffice', -1, $Auth->usergroup_id)) {								                    $this->output["messages"]["bad"][] = "В соответсвии с регламентом на портале не размещаются форматы файлов Microsoft Office. <br />Эти данные необходимо конвертировать в формат pdf. <br />За помощью обратитесь к системному администратору вашего подразделения.";							                    }                                                 else {                                                                                                        if(!isset($_POST[$node_id]["file_descript"][$i]) || empty($_POST[$node_id]["file_descript"][$i])) {                                                            $file_descript = $original_name;							                            } else $file_descript = $this->cp1251_to_utf8($_POST[$node_id]["file_descript"][$i]);                                                                                                                                                                        $DB->SetTable($this->db_prefix."files");									                    $DB->AddValues(array(										                    "name" => $original_name,										                    "descr" => $file_descript ,										                    //"author" => $this->cp1251_to_utf8($_POST["upload_author"]),										                    //"year" => $this->cp1251_to_utf8($_POST["upload_year"]),										                    //"volume" => $_POST["upload_volume"],										                    //"edition" => $_POST["upload_edition"],										                    //"place" => $this->cp1251_to_utf8($_POST["upload_place"]),										                    "filename" => $ext,										                    "user_id" => $_SESSION["user_id"],                                                            "folder_id" => $folder_id,									                    ));															                    $DB->Insert();									                    $new_id = $DB->LastInsertID();	                                                                                                            $new_name = "idpo_".$new_id.'.'.$ext;								                    $path = $_SERVER['DOCUMENT_ROOT'].'/files/'.$new_name;																                    $Engine->LogAction($this->module_id, "file", $new_id, "create");								                     								                    if (!move_uploaded_file($tmp_name, $path)) {									                    $DB->SetTable($this->db_prefix."files");									                    $DB->AddCondFS("id", "=", $new_id);									                    $DB->Delete();									                    $this->output["messages"]["bad"][] = "Не удалось закачать файл";																	                    }							                    }                                                                                                                                           }                                  }						$i++;	}					}                                         else {						$this->output["messages"]["bad"][] = "Файл не обнаружен";					}                                            }    function void_edit_Folder($folder_id)	{             global $Engine,  $DB;                        if (is_numeric($folder_id))                {                    $DB->SetTable($this->db_prefix . "files_folders");                    $DB->AddCondFS("id", "=", $folder_id);                    $res = $DB->Select(1);                                        if ($row = $DB->FetchObject($res))                    {                         $DB->FreeRes($res);                                                $this->display_variant = "edit_folder";                        $this->form_data = array(                            "id" => $folder_id,                            "f_name" => htmlspecialchars($row->name),                            "f_description" => htmlspecialchars($row->description),                            "f_isActive" => ($row->isActive ==true ? 'checked="checked"' : ''),                            "f_pass" => htmlspecialchars($row->pass),                            //"f_deadLine" => (format($row->deadLine,"yyyy/MM/dd"))                            "f_deadLine" => $row->deadLine != '0000-00-00' ? date("Y/m/d", strtotime($row->deadLine)) : ''                            );                                                                        $this->output["form_data"]=$this->form_data;                    }                                    }                   }function void_delete_Folder($folder_id){     global $Engine,  $DB;        if (is_numeric($folder_id))    {            $arr_files=$this->arr_List_files($folder_id);                foreach ($arr_files as $elem) {                                $new_name = "idpo_".$elem["id"].'.'.$elem["filename"];						$path = $_SERVER['DOCUMENT_ROOT'].'/files/'.$new_name;                                       if(file_exists($path) and !unlink($path)) $err = "ошибка при удалении файла";                        else {                            $DB->SetTable($this->db_prefix ."files");                            $DB->AddCondFS("id", "=", $elem["id"]);                            $DB->Delete();                             }                }        if (!$err){                    $DB->SetTable($this->db_prefix . "files_folders");            $DB->AddCondFS("id", "=", $folder_id);            if (is_string($DB->Delete()))             {                $status = false;                $this->output["messages"]["bad"][] = 307; // ошибка БД при удалении            }            else            {                $this->output["messages"]["good"][] = 506; // успешное удаление                $Engine->LogAction($this->module_id, "item", $folder_id, "Delete");                         }        }    }    }function void_Add_Folder()	{             global $Engine,  $DB;            $this->output["POST_DATA void_Add_Folder"]=$_POST;		            $this->status = true;                                        $POST_DATA=$_POST[$this->node_id];                                                                       foreach ($POST_DATA as $key => $elem)				{					$POST_DATA[$key] = trim($elem);				}                                                                if (!CF::IsNonEmptyStr($POST_DATA["folder_name"])) {				$this->status = false;				$this->output["messages"]["bad"][] = 101; // не задано название папки			}                                                                    if ($this->status)			{								$DB->SetTable($this->db_prefix . "files_folders");								$DB->AddValue("name", $POST_DATA["folder_name"]); 				$DB->AddValue("description", $POST_DATA["folder_descr"]);                                $DB->AddValue("isActive", $POST_DATA["folder_is_active"]=="on" ? 1 : 0);				$DB->AddValue("pass", $POST_DATA["folder_pass"]);                                                                $this->output["progress"][]="проверяю дату";                $DB->AddValue("deadLine", $POST_DATA["folder_deadline"]);                $DB->AddValue("date", "NOW()", "X");                                //если в форме задан ID папки                                 if (isset( $POST_DATA["id"]) and is_numeric( $POST_DATA["id"]))                {                                        //провести обновление данных                    $DB->AddCondFS("id", "=", $POST_DATA["id"]);                    if (is_string($DB->Update(1)))                             {                            $status = false;                            $this->output["messages"]["bad"][] = 306; // ошибка БД при сохранении                            }                     else                            {                                $this->output["messages"]["good"][] = 505; // успешное обновление                                $Engine->LogAction($this->module_id, "item", $POST_DATA["id"], "Update");                                 //CF::Redirect($Engine->unqueried_uri); // чтобы очистить POST, а заодно оказаться на первой странице и увидеть свое сообщение                            }				                               }                    //иначе провести добавление данных				else                {                                        if (is_string($DB->Insert()))                       {					        $this->status = false;					        $this->output["messages"]["bad"][] = 306; // ошибка добавления в БД				        }                     else                       {                                                      $Engine->LogAction($this->module_id, "item", $DB->LastInsertId(), "add");                            //CF::Redirect($Engine->unqueried_uri); // чтобы очистить POST, а заодно оказаться на первой странице и увидеть свое сообщение                       }                }                							}	    if (!$this->status)			{				$this->output["folder_name"] = htmlspecialchars($POST_DATA["folder_name"]);				$this->output["folder_descr"] = htmlspecialchars($POST_DATA["folder_descr"]);				$this->output["isActive"] = htmlspecialchars($POST_DATA["folder_is_active"]);				$this->output["deadLine"] = htmlspecialchars($POST_DATA["deadLine"]);                           }                                                                                             }        function arr_List_Folder($folder_id = null)    {    		global $DB;				$foldersList = array();		$DB->SetTable($this->db_prefix . "files_folders");                $DB->AddFields(array("id", "name","pass", "description", "isActive", "deadLine", "date" ));                $DB->AddOrder("date");                                if(!is_null($folder_id)) {                    $DB->AddCondFS("id", "=", $folder_id);		                }                                                $res = $DB->Select();		while ($row = $DB->FetchObject($res))                    		{            if (!$this->manage_access)            {                                   $today  = mktime(0, 0, 0, date("m")  , date("d"), date("Y"));                if (strtotime($row->deadLine) < $today)                continue;                             }                   			$foldersList[] = array(				"id" => $row->id,				"name" => $row->name,				"descr" => $row->description,				"isActive" => $row->isActive,				"deadLine" => $row->deadLine,                 "pass" => $row->pass, 				"date" => $row->date,                                );		}                                		return $foldersList;}function void_delete_file($file_id)    {    global $DB, $Auth, $Engine;                      if(is_numeric($file_id)) {        $DB->SetTable($this->db_prefix ."files");        $DB->AddCondFS("id", "=", $file_id);		                $filesList = array();        $DB->AddFields(array("id", "name", "descr", "author", "year", "volume", "edition", "place", "filename", "user_id", "is_html", "down_count", "folder_id" ));                $res = $DB->Select();        while ($row = $DB->FetchObject($res))                {                          $FilesList[] = array(                "id" => $row->id,                "name" => $row->name,                "descr" => $row->descr,                "author" => $row->author,                "year" => $row->year,                 "volume" => $row->volume,                "edition" => $row->edition,                "filename" => $row->filename,                "user_id" => $row->user_id,                "is_html" => $row->is_html,                "down_count" => $row->down_count,                "folder_id" => $folder_id,                "size" => $fsize                                );                }            $file =  $_SERVER['DOCUMENT_ROOT'].'files/idpo_'.$FilesList[0]["id"].".".$FilesList[0]["filename"];                        if (file_exists($file))  unlink($file);                 $DB->SetTable($this->db_prefix ."files");            $DB->AddCondFS("id", "=", $file_id);            $DB->Delete();        } }function arr_List_files($folder_id, $file_id = null)    {    global $DB, $Auth, $Engine;        //проверка пароля на папке        $arr_myfolder = array();    //получаю данные о папке    $arr_myfolder = $this->arr_List_Folder($folder_id);        if ($arr_myfolder[0]["id"]==$folder_id){       // проверяю наличие пароля        if($arr_myfolder[0]["pass"] != ""){            if( $_SESSION["module_".$this->module_id]["folder_".$folder_id]['pass'] != $arr_myfolder[0]["pass"])            {                                $this->output["messages"]["bad"][]=308;//неверный пароль в сесиии                return null;            }                    }                                   $DB->SetTable($this->db_prefix ."files");        $DB->AddCondFS("folder_id", "=", $folder_id);	        if(!is_null($file_id)) {            $DB->AddCondFS("id", "=", $file_id);		        }            $filesList = array();        $DB->AddFields(array("id", "name", "descr", "author", "year", "volume", "edition", "place", "filename", "user_id", "is_html", "down_count", "folder_id" ));        $DB->AddOrder("name");        $res = $DB->Select();        while ($row = $DB->FetchObject($res))            {                 $fsize = $this->str_fileSize( $_SERVER['DOCUMENT_ROOT'].'files/idpo_'.$row->id.".".$row->filename);                            $FilesList[] = array(                "id" => $row->id,                "name" => $row->name,                "descr" => $row->descr,                "author" => $row->author,                "year" => $row->year,                 "volume" => $row->volume,                "edition" => $row->edition,                "filename" => $row->filename,                "user_id" => $row->user_id,                "is_html" => $row->is_html,                "down_count" => $row->down_count,                "folder_id" => $folder_id,                "size" => $fsize                                );        }                    if($file_id != null)        {            $file =  $_SERVER['DOCUMENT_ROOT'].'files/idpo_'.$FilesList[0]["id"].".".$FilesList[0]["filename"];            if (file_exists($file)) {                // сбрасываем буфер вывода PHP, чтобы избежать переполнения памяти выделенной под скрипт                // если этого не сделать файл будет читаться в память полностью!                if (ob_get_level()) {                    ob_end_clean();                }                                // заставляем браузер показать окно сохранения файла                header('Content-Description: File Transfer');                header('Content-Type: application/octet-stream');                header('Content-Disposition: attachment; filename=' .$FilesList[0]["name"].".".$FilesList[0]["filename"]);                header('Content-Transfer-Encoding: binary');                header('Expires: 0');                header('Cache-Control: must-revalidate');                header('Pragma: public');                header('Content-Length: ' . filesize($file));                // читаем файл и отправляем его пользователю                readfile($file);                exit;            }            else {$this->output["messages"]["bad"][]=309;//файл не найден на сервере                 }                                                            }                return $FilesList;    }    return null;}function datetotime ($date, $format = 'YYYY-MM-DD') {    if ($format == 'YYYY-MM-DD') list($year, $month, $day) = explode('-', $date);    if ($format == 'YYYY/MM/DD') list($year, $month, $day) = explode('/', $date);    if ($format == 'YYYY.MM.DD') list($year, $month, $day) = explode('.', $date);    if ($format == 'DD-MM-YYYY') list($day, $month, $year) = explode('-', $date);    if ($format == 'DD/MM/YYYY') list($day, $month, $year) = explode('/', $date);    if ($format == 'DD.MM.YYYY') list($day, $month, $year) = explode('.', $date);    if ($format == 'MM-DD-YYYY') list($month, $day, $year) = explode('-', $date);    if ($format == 'MM/DD/YYYY') list($month, $day, $year) = explode('/', $date);    if ($format == 'MM.DD.YYYY') list($month, $day, $year) = explode('.', $date);    return mktime(0, 0, 0, $month, $day, $year);}function cp1251_to_utf8 ($txt)  {		$in_arr = array (			chr(208), chr(192), chr(193), chr(194),			chr(195), chr(196), chr(197), chr(168),			chr(198), chr(199), chr(200), chr(201),			chr(202), chr(203), chr(204), chr(205),			chr(206), chr(207), chr(209), chr(210),			chr(211), chr(212), chr(213), chr(214),			chr(215), chr(216), chr(217), chr(218),			chr(219), chr(220), chr(221), chr(222),			chr(223), chr(224), chr(225), chr(226),			chr(227), chr(228), chr(229), chr(184),			chr(230), chr(231), chr(232), chr(233),			chr(234), chr(235), chr(236), chr(237),			chr(238), chr(239), chr(240), chr(241),			chr(242), chr(243), chr(244), chr(245),			chr(246), chr(247), chr(248), chr(249),			chr(250), chr(251), chr(252), chr(253),			chr(254), chr(255)		);  	 		$out_arr = array (			chr(208).chr(160), chr(208).chr(144), chr(208).chr(145),			chr(208).chr(146), chr(208).chr(147), chr(208).chr(148),			chr(208).chr(149), chr(208).chr(129), chr(208).chr(150),			chr(208).chr(151), chr(208).chr(152), chr(208).chr(153),			chr(208).chr(154), chr(208).chr(155), chr(208).chr(156),			chr(208).chr(157), chr(208).chr(158), chr(208).chr(159),			chr(208).chr(161), chr(208).chr(162), chr(208).chr(163),			chr(208).chr(164), chr(208).chr(165), chr(208).chr(166),			chr(208).chr(167), chr(208).chr(168), chr(208).chr(169),			chr(208).chr(170), chr(208).chr(171), chr(208).chr(172),			chr(208).chr(173), chr(208).chr(174), chr(208).chr(175),			chr(208).chr(176), chr(208).chr(177), chr(208).chr(178),			chr(208).chr(179), chr(208).chr(180), chr(208).chr(181),			chr(209).chr(145), chr(208).chr(182), chr(208).chr(183),			chr(208).chr(184), chr(208).chr(185), chr(208).chr(186),			chr(208).chr(187), chr(208).chr(188), chr(208).chr(189),			chr(208).chr(190), chr(208).chr(191), chr(209).chr(128),			chr(209).chr(129), chr(209).chr(130), chr(209).chr(131),			chr(209).chr(132), chr(209).chr(133), chr(209).chr(134),			chr(209).chr(135), chr(209).chr(136), chr(209).chr(137),			chr(209).chr(138), chr(209).chr(139), chr(209).chr(140),			chr(209).chr(141), chr(209).chr(142), chr(209).chr(143)		);  	 		$txt = str_replace($out_arr,$in_arr,$txt);		return $txt;}function str_fileSize($filepath){				if(file_exists($filepath)) {							$filesize = filesize($filepath);							if ($filesize > 999 && $filesize < 1048576) {								$filesize /= 1024;								if ($filesize > 100)									$filesize = substr($filesize, 0, 3);								else									$filesize = substr($filesize, 0, 4);								$fileend = "кб";							}							elseif ($filesize >= 1048576) {								$filesize /= 1048576;								$filesize = substr($filesize, 0, 4);								$fileend = "Мб";							}							else								$fileend = "байт";							return $filesize." ".$fileend;                }                return "не найден";}	function Output() {		return $this->output;	}        }?>